diff -ru orig/Data/Array/Static.hs new/Data/Array/Static.hs
--- orig/Data/Array/Static.hs	2013-10-14 08:54:53.323237141 +0300
+++ new/Data/Array/Static.hs	2013-10-14 08:54:52.000000000 +0300
@@ -1,3 +1,4 @@
+{-# LANGUAGE BangPatterns #-}
 {-# LANGUAGE MagicHash #-}
 module Data.Array.Static where
 
@@ -11,5 +12,5 @@
 bounds (StaticArray s e _) = (s,e)
 
 (!) :: (StaticElement e,Ix i) => StaticArray i e -> i -> e
-(!) (StaticArray s e addr) i = let (I# ri) = index (s,e) i
+(!) (StaticArray s e addr) i = let !(I# ri) = index (s,e) i
                                in extract addr ri
diff -ru orig/Data/Static.hs new/Data/Static.hs
--- orig/Data/Static.hs	2013-10-14 08:54:53.323237141 +0300
+++ new/Data/Static.hs	2013-10-14 08:54:52.000000000 +0300
@@ -1,4 +1,4 @@
-{-# LANGUAGE MagicHash,FlexibleInstances,BangPatterns #-}
+{-# LANGUAGE CPP,MagicHash,FlexibleInstances,BangPatterns #-}
 module Data.Static where
 
 import GHC.Exts
@@ -36,7 +36,11 @@
 
 instance StaticElement (Maybe Char) where
     extract addr i = let !v = indexWord32OffAddr# addr i
+#if __GLASGOW_HASKELL__ >= 707
+                     in if I# (eqWord# v (int2Word# 4294967295#)) /= 0 -- -1 in Word32
+#else
                      in if eqWord# v (int2Word# 4294967295#) -- -1 in Word32
+#endif
                         then Nothing
                         else (if (I# (word2Int# v)) > 0x10FFFF
                               then error (show (I# (word2Int# v))++" is not a valid char ("++show (I# i)++")")
diff -ru orig/encoding.cabal new/encoding.cabal
--- orig/encoding.cabal	2013-10-14 08:54:53.359237141 +0300
+++ new/encoding.cabal	2013-10-14 08:54:52.000000000 +0300
@@ -1,128 +1,97 @@
-Name:		encoding
-Version:	0.6.7.2
-Author:		Henning Günther
-Maintainer:	daniel@wagner-home.com
-License:	BSD3
-License-File:   LICENSE
-Synopsis:	A library for various character encodings
-Description:
-	Haskell has excellect handling of unicode, the Char type covers all unicode chars. Unfortunatly, there's no possibility to read or write something to the outer world in an encoding other than ascii due to the lack of support for encodings. This library should help with that.
-Category:	Codec
-Homepage:	http://code.haskell.org/encoding/
-Cabal-Version:	>=1.6
-Build-Type:	Custom
-Extra-Source-Files:
-  NEWS
-  Data/Encoding/Preprocessor/Mapping.hs
-  Data/Encoding/Preprocessor/XMLMapping.hs
-  Data/Encoding/Preprocessor/XMLMappingBuilder.hs
-  Data/CharMap/Builder.hs
-  Data/Array/Static/Builder.hs
-  Data/Map/Static/Builder.hs
-  system_encoding.h
-  system_encoding.c
-
-Flag splitBase
-  description:	Choose the new smaller, split-up base package.
-Flag newGHC
-  description: Use ghc version > 6.10
-Flag systemEncoding
-  description: Provide the getSystemEncoding action to query the locale.
-
-Source-Repository head
-  Type:			darcs
-  Location:		http://code.haskell.org/encoding
-
-Source-Repository this
-  Type:			darcs
-  Location:		http://code.haskell.org/encoding
-  Tag:			0.6.7.1
-
-Library
-  Build-Depends:	binary < 0.6, extensible-exceptions, HaXml >= 1.22 && < 1.24
-  if flag(splitBase)
-    Build-Depends:	bytestring, base >= 3 && < 5, mtl, containers, array, regex-compat
-    if flag(newGHC)
-      Build-Depends:	ghc-prim, ghc >= 6.10
+name: encoding
+version: 0.6.7.2
+cabal-version: >=1.6
+build-type: Custom
+license: BSD3
+license-file: LICENSE
+maintainer: daniel@wagner-home.com
+homepage: http://code.haskell.org/encoding/
+synopsis: A library for various character encodings
+description: Haskell has excellect handling of unicode, the Char type covers all unicode chars. Unfortunatly, there's no possibility to read or write something to the outer world in an encoding other than ascii due to the lack of support for encodings. This library should help with that.
+category: Codec
+author: Henning Günther
+data-dir: ""
+extra-source-files: NEWS Data/Encoding/Preprocessor/Mapping.hs
+                    Data/Encoding/Preprocessor/XMLMapping.hs
+                    Data/Encoding/Preprocessor/XMLMappingBuilder.hs
+                    Data/CharMap/Builder.hs Data/Array/Static/Builder.hs
+                    Data/Map/Static/Builder.hs system_encoding.h system_encoding.c
+ 
+source-repository head
+    type: darcs
+    location: http://code.haskell.org/encoding
+ 
+source-repository this
+    type: darcs
+    location: http://code.haskell.org/encoding
+    tag: 0.6.7.1
+ 
+flag splitbase
+    Description:  Choose the new smaller, split-up base package.
+ 
+flag newghc
+    Description:  Use ghc version > 6.10
+ 
+flag systemencoding
+    Description:  Provide the getSystemEncoding action to query the locale.
+ 
+library
+    build-depends: binary <0.8, extensible-exceptions -any,
+                   HaXml >=1.22 && <1.24
+     
+    if flag(splitbase)
+        build-depends: bytestring -any, base -any, mtl -any,
+                       containers -any, array -any, regex-compat -any
+         
+        if flag(newghc)
+            build-depends: ghc-prim -any, ghc >=6.10
+            exposed: True
+            buildable: True
+        else
+            build-depends: ghc <6.10
+            exposed: True
+            buildable: True
+        exposed: True
+        buildable: True
     else
-      Build-Depends:	ghc < 6.10
-  else
-    Build-Depends:	base < 3
-
-  Extensions: CPP
-
-  Exposed-Modules:
-    Data.Encoding
-    Data.Encoding.ByteSource
-    Data.Encoding.ByteSink
-    Data.Encoding.Exception
-    Control.Throws
-    Data.Encoding.ASCII
-    Data.Encoding.UTF8
-    Data.Encoding.UTF16
-    Data.Encoding.UTF32
-    Data.Encoding.KOI8R
-    Data.Encoding.KOI8U
-    Data.Encoding.ISO88591
-    Data.Encoding.ISO88592
-    Data.Encoding.ISO88593
-    Data.Encoding.ISO88594
-    Data.Encoding.ISO88595
-    Data.Encoding.ISO88596
-    Data.Encoding.ISO88597
-    Data.Encoding.ISO88598
-    Data.Encoding.ISO88599
-    Data.Encoding.ISO885910
-    Data.Encoding.ISO885911
-    Data.Encoding.ISO885913
-    Data.Encoding.ISO885914
-    Data.Encoding.ISO885915
-    Data.Encoding.ISO885916
-    Data.Encoding.CP1250
-    Data.Encoding.CP1251
-    Data.Encoding.CP1252
-    Data.Encoding.CP1253
-    Data.Encoding.CP1254
-    Data.Encoding.CP1255
-    Data.Encoding.CP1256
-    Data.Encoding.CP1257
-    Data.Encoding.CP1258
-    Data.Encoding.GB18030
-    Data.Encoding.BootString
-    Data.Encoding.MacOSRoman
-    Data.Encoding.JISX0201
-    Data.Encoding.JISX0208
-    Data.Encoding.JISX0212
-    Data.Encoding.ISO2022
-    Data.Encoding.ISO2022JP
-    Data.Encoding.CP437
-    Data.Encoding.CP737
-    Data.Encoding.CP775
-    Data.Encoding.CP850
-    Data.Encoding.CP852
-    Data.Encoding.CP855
-    Data.Encoding.CP857
-    Data.Encoding.CP860
-    Data.Encoding.CP861
-    Data.Encoding.CP862
-    Data.Encoding.CP863
-    Data.Encoding.CP864
-    Data.Encoding.CP865
-    Data.Encoding.CP866
-    Data.Encoding.CP869
-    Data.Encoding.CP874
-    System.IO.Encoding
-  Other-Modules:
-    Data.Encoding.Base
-    Data.Array.Static
-    Data.Map.Static
-    Data.Static
-    Data.CharMap
-  if flag(systemEncoding)
-    Includes:
-      system_encoding.h
-    Install-Includes:
-      system_encoding.h
-    C-Sources:
-      system_encoding.c
-    CPP-Options: -DSYSTEM_ENCODING
+        build-depends: base -any
+        exposed: True
+        buildable: True
+     
+    if flag(systemencoding)
+        exposed: True
+        buildable: True
+        cpp-options: -DSYSTEM_ENCODING
+        c-sources: system_encoding.c
+        includes: system_encoding.h
+        install-includes: system_encoding.h
+    exposed-modules: Data.Encoding Data.Encoding.ByteSource
+                     Data.Encoding.ByteSink Data.Encoding.Exception Control.Throws
+                     Data.Encoding.ASCII Data.Encoding.UTF8 Data.Encoding.UTF16
+                     Data.Encoding.UTF32 Data.Encoding.KOI8R Data.Encoding.KOI8U
+                     Data.Encoding.ISO88591 Data.Encoding.ISO88592
+                     Data.Encoding.ISO88593 Data.Encoding.ISO88594
+                     Data.Encoding.ISO88595 Data.Encoding.ISO88596
+                     Data.Encoding.ISO88597 Data.Encoding.ISO88598
+                     Data.Encoding.ISO88599 Data.Encoding.ISO885910
+                     Data.Encoding.ISO885911 Data.Encoding.ISO885913
+                     Data.Encoding.ISO885914 Data.Encoding.ISO885915
+                     Data.Encoding.ISO885916 Data.Encoding.CP1250 Data.Encoding.CP1251
+                     Data.Encoding.CP1252 Data.Encoding.CP1253 Data.Encoding.CP1254
+                     Data.Encoding.CP1255 Data.Encoding.CP1256 Data.Encoding.CP1257
+                     Data.Encoding.CP1258 Data.Encoding.GB18030 Data.Encoding.BootString
+                     Data.Encoding.MacOSRoman Data.Encoding.JISX0201
+                     Data.Encoding.JISX0208 Data.Encoding.JISX0212 Data.Encoding.ISO2022
+                     Data.Encoding.ISO2022JP Data.Encoding.CP437 Data.Encoding.CP737
+                     Data.Encoding.CP775 Data.Encoding.CP850 Data.Encoding.CP852
+                     Data.Encoding.CP855 Data.Encoding.CP857 Data.Encoding.CP860
+                     Data.Encoding.CP861 Data.Encoding.CP862 Data.Encoding.CP863
+                     Data.Encoding.CP864 Data.Encoding.CP865 Data.Encoding.CP866
+                     Data.Encoding.CP869 Data.Encoding.CP874 System.IO.Encoding
+    exposed: True
+    buildable: True
+    extensions: CPP
+    other-modules: Data.Encoding.Base Data.Array.Static Data.Map.Static
+                   Data.Static Data.CharMap
+ 
+ 
